// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Yuv2Rgb

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<uint4> lumaBuffer;
StructuredBuffer<uint4> uBuffer;
StructuredBuffer<uint4> vBuffer;
RWStructuredBuffer<uint4> rgbaBuffer;

static float3x3 yuvToRgbMetrix = {
		1.0f, 0.0f, 1.13983f,
		1.0f, -0.21482f, -0.38059f,
		1.0f, 2.12798f, 0.f
};

uint convertYUVtoRGBA(uint y, uint u, uint v)
{
	float3 yuvf = float3(y, u - 128.f, v - 128.f);
	
	float3 rgbf = clamp(mul(yuvToRgbMetrix, yuvf), 0, 255);
	uint3 rgb = rgbf;

	return rgb.r | rgb.g << 8 | rgb.b << 16 | 0xFF000000;
}

// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/sv-groupindex
// handle 4 pixel per group
// GroupWidth = 1920 / 4
// GroupHeight = 1080
[numthreads(8, 8, 1)]
void Yuv2Rgb(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x + id.y * 1920 / 4;
	uint lumas = lumaBuffer[index / 4][index % 4];
	uint l1 = lumas & 0xFF;
	uint l2 = (lumas >> 8) & 0xFF;
	uint l3 = (lumas >> 16) & 0xFF;
	uint l4 = (lumas >> 24) & 0xFF;

	uint chromaIndex = (id.x / 2) + (id.y / 2 * 1920 / 4);
	uint chromaBufferIndex = chromaIndex / 4;
	uint isOdd = id.x % 2;

	uint us = uBuffer[chromaBufferIndex >> 2][chromaBufferIndex % 4];
	uint u1 = (us >> (8 * isOdd)) & 0xFF;
	uint u2 = (us >> (16 * isOdd)) & 0xFF;

	uint vs = vBuffer[chromaBufferIndex >> 2][chromaBufferIndex % 4];
	uint v1 = (vs >> (8 * isOdd)) & 0xFF;
	uint v2 = (vs >> (16 * isOdd)) & 0xFF;

	uint rgba1 = convertYUVtoRGBA(l1, u1, v1);
	uint rgba2 = convertYUVtoRGBA(l2, u1, v1);
	uint rgba3 = convertYUVtoRGBA(l3, u2, v2);
	uint rgba4 = convertYUVtoRGBA(l4, u2, v2);

	rgbaBuffer[index] = uint4(rgba1, rgba2, rgba3, rgba4);
}



// width = 8
// width / 4 * 2 개의 chroma로 (4)
// width * 2개의 luma를 설정 가능


// 2 => 1
// 3 => 1
// 10 => 1
// 11 => 1
// x => y
// (x % width) / 2 => y
// 18 => 5
// x / (2 * width) * (width / 4 * 2) + (x % width) / 2
// 18 / 16 * 4 + (18 % 8) / 2
// 1 * 4 + 2 / 2 = 5

// 0           1
// u0    u1    u2    u3
// l0 l1 l2 l3 l4 l5 l6 l7
// 3           4
// l8 l9 l0 l1 l2 l3 l4 l5

// 5           6
// l6 l7 l8 l9 l0 l1 l2 l3
// 7           8
// l4 l5 l6 l7 l8 l9 l0 l1

// 9           10
// u4    u5    u6    u7
// l6 l7 l8 l9 l0 l1 l2 l3
// 11          12
// l4 l5 l6 l7 l8 l9 l0 l1